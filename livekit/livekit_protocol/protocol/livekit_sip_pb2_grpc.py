# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2
import livekit_sip_pb2 as livekit__sip__pb2

GRPC_GENERATED_VERSION = '1.67.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in livekit_sip_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class SIPStub(object):
    """
    LiveKit's SIP API is built with 3 high level primitives
    - SIP Trunk
    - SIP Dispatch Rule
    - SIP Participant


    The `SIP Trunk` is used to accept and make calls. A `SIP Trunk` is configured with
    the IPs/Ports and Authentication details of your SIP Provider. When a call is accepted from
    the `SIP Trunk` it is then handled by the `SIP Dispatch Rules`. When a `SIP Participant` is created
    for a outbound call a `SIP Trunk` is chosen to make the call with.


    The `SIP Dispatch Rule` is a list of rules that dictate how a incoming SIP call should be handled.
    LiveKit currently supports 2 types, but may support more in the future.

    - `Direct Dispatch` puts a caller into a existing room, possibly choosing between multiple rooms with a pin
    - `Individual Dispatch` puts a caller into a new room created for the call


    The `SIP Participant` represents an active SIP Session. These SIP Sessions are always associated with
    a Participant on LiveKit side. Inbound calls create Participants directly (with a `SIP` kind), while outbound
    calls must be initiated with `CreateSIPParticipant`.

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ListSIPTrunk = channel.unary_unary(
                '/livekit.SIP/ListSIPTrunk',
                request_serializer=livekit__sip__pb2.ListSIPTrunkRequest.SerializeToString,
                response_deserializer=livekit__sip__pb2.ListSIPTrunkResponse.FromString,
                _registered_method=True)
        self.CreateSIPInboundTrunk = channel.unary_unary(
                '/livekit.SIP/CreateSIPInboundTrunk',
                request_serializer=livekit__sip__pb2.CreateSIPInboundTrunkRequest.SerializeToString,
                response_deserializer=livekit__sip__pb2.SIPInboundTrunkInfo.FromString,
                _registered_method=True)
        self.CreateSIPOutboundTrunk = channel.unary_unary(
                '/livekit.SIP/CreateSIPOutboundTrunk',
                request_serializer=livekit__sip__pb2.CreateSIPOutboundTrunkRequest.SerializeToString,
                response_deserializer=livekit__sip__pb2.SIPOutboundTrunkInfo.FromString,
                _registered_method=True)
        self.GetSIPInboundTrunk = channel.unary_unary(
                '/livekit.SIP/GetSIPInboundTrunk',
                request_serializer=livekit__sip__pb2.GetSIPInboundTrunkRequest.SerializeToString,
                response_deserializer=livekit__sip__pb2.GetSIPInboundTrunkResponse.FromString,
                _registered_method=True)
        self.GetSIPOutboundTrunk = channel.unary_unary(
                '/livekit.SIP/GetSIPOutboundTrunk',
                request_serializer=livekit__sip__pb2.GetSIPOutboundTrunkRequest.SerializeToString,
                response_deserializer=livekit__sip__pb2.GetSIPOutboundTrunkResponse.FromString,
                _registered_method=True)
        self.ListSIPInboundTrunk = channel.unary_unary(
                '/livekit.SIP/ListSIPInboundTrunk',
                request_serializer=livekit__sip__pb2.ListSIPInboundTrunkRequest.SerializeToString,
                response_deserializer=livekit__sip__pb2.ListSIPInboundTrunkResponse.FromString,
                _registered_method=True)
        self.ListSIPOutboundTrunk = channel.unary_unary(
                '/livekit.SIP/ListSIPOutboundTrunk',
                request_serializer=livekit__sip__pb2.ListSIPOutboundTrunkRequest.SerializeToString,
                response_deserializer=livekit__sip__pb2.ListSIPOutboundTrunkResponse.FromString,
                _registered_method=True)
        self.DeleteSIPTrunk = channel.unary_unary(
                '/livekit.SIP/DeleteSIPTrunk',
                request_serializer=livekit__sip__pb2.DeleteSIPTrunkRequest.SerializeToString,
                response_deserializer=livekit__sip__pb2.SIPTrunkInfo.FromString,
                _registered_method=True)
        self.CreateSIPDispatchRule = channel.unary_unary(
                '/livekit.SIP/CreateSIPDispatchRule',
                request_serializer=livekit__sip__pb2.CreateSIPDispatchRuleRequest.SerializeToString,
                response_deserializer=livekit__sip__pb2.SIPDispatchRuleInfo.FromString,
                _registered_method=True)
        self.ListSIPDispatchRule = channel.unary_unary(
                '/livekit.SIP/ListSIPDispatchRule',
                request_serializer=livekit__sip__pb2.ListSIPDispatchRuleRequest.SerializeToString,
                response_deserializer=livekit__sip__pb2.ListSIPDispatchRuleResponse.FromString,
                _registered_method=True)
        self.DeleteSIPDispatchRule = channel.unary_unary(
                '/livekit.SIP/DeleteSIPDispatchRule',
                request_serializer=livekit__sip__pb2.DeleteSIPDispatchRuleRequest.SerializeToString,
                response_deserializer=livekit__sip__pb2.SIPDispatchRuleInfo.FromString,
                _registered_method=True)
        self.CreateSIPParticipant = channel.unary_unary(
                '/livekit.SIP/CreateSIPParticipant',
                request_serializer=livekit__sip__pb2.CreateSIPParticipantRequest.SerializeToString,
                response_deserializer=livekit__sip__pb2.SIPParticipantInfo.FromString,
                _registered_method=True)
        self.TransferSIPParticipant = channel.unary_unary(
                '/livekit.SIP/TransferSIPParticipant',
                request_serializer=livekit__sip__pb2.TransferSIPParticipantRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)


class SIPServicer(object):
    """
    LiveKit's SIP API is built with 3 high level primitives
    - SIP Trunk
    - SIP Dispatch Rule
    - SIP Participant


    The `SIP Trunk` is used to accept and make calls. A `SIP Trunk` is configured with
    the IPs/Ports and Authentication details of your SIP Provider. When a call is accepted from
    the `SIP Trunk` it is then handled by the `SIP Dispatch Rules`. When a `SIP Participant` is created
    for a outbound call a `SIP Trunk` is chosen to make the call with.


    The `SIP Dispatch Rule` is a list of rules that dictate how a incoming SIP call should be handled.
    LiveKit currently supports 2 types, but may support more in the future.

    - `Direct Dispatch` puts a caller into a existing room, possibly choosing between multiple rooms with a pin
    - `Individual Dispatch` puts a caller into a new room created for the call


    The `SIP Participant` represents an active SIP Session. These SIP Sessions are always associated with
    a Participant on LiveKit side. Inbound calls create Participants directly (with a `SIP` kind), while outbound
    calls must be initiated with `CreateSIPParticipant`.

    """

    def ListSIPTrunk(self, request, context):
        """rpc CreateSIPTrunk(CreateSIPTrunkRequest) returns (SIPTrunkInfo) { option deprecated = true; }; DELETED
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateSIPInboundTrunk(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateSIPOutboundTrunk(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSIPInboundTrunk(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSIPOutboundTrunk(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListSIPInboundTrunk(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListSIPOutboundTrunk(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteSIPTrunk(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateSIPDispatchRule(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListSIPDispatchRule(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteSIPDispatchRule(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateSIPParticipant(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TransferSIPParticipant(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SIPServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ListSIPTrunk': grpc.unary_unary_rpc_method_handler(
                    servicer.ListSIPTrunk,
                    request_deserializer=livekit__sip__pb2.ListSIPTrunkRequest.FromString,
                    response_serializer=livekit__sip__pb2.ListSIPTrunkResponse.SerializeToString,
            ),
            'CreateSIPInboundTrunk': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateSIPInboundTrunk,
                    request_deserializer=livekit__sip__pb2.CreateSIPInboundTrunkRequest.FromString,
                    response_serializer=livekit__sip__pb2.SIPInboundTrunkInfo.SerializeToString,
            ),
            'CreateSIPOutboundTrunk': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateSIPOutboundTrunk,
                    request_deserializer=livekit__sip__pb2.CreateSIPOutboundTrunkRequest.FromString,
                    response_serializer=livekit__sip__pb2.SIPOutboundTrunkInfo.SerializeToString,
            ),
            'GetSIPInboundTrunk': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSIPInboundTrunk,
                    request_deserializer=livekit__sip__pb2.GetSIPInboundTrunkRequest.FromString,
                    response_serializer=livekit__sip__pb2.GetSIPInboundTrunkResponse.SerializeToString,
            ),
            'GetSIPOutboundTrunk': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSIPOutboundTrunk,
                    request_deserializer=livekit__sip__pb2.GetSIPOutboundTrunkRequest.FromString,
                    response_serializer=livekit__sip__pb2.GetSIPOutboundTrunkResponse.SerializeToString,
            ),
            'ListSIPInboundTrunk': grpc.unary_unary_rpc_method_handler(
                    servicer.ListSIPInboundTrunk,
                    request_deserializer=livekit__sip__pb2.ListSIPInboundTrunkRequest.FromString,
                    response_serializer=livekit__sip__pb2.ListSIPInboundTrunkResponse.SerializeToString,
            ),
            'ListSIPOutboundTrunk': grpc.unary_unary_rpc_method_handler(
                    servicer.ListSIPOutboundTrunk,
                    request_deserializer=livekit__sip__pb2.ListSIPOutboundTrunkRequest.FromString,
                    response_serializer=livekit__sip__pb2.ListSIPOutboundTrunkResponse.SerializeToString,
            ),
            'DeleteSIPTrunk': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteSIPTrunk,
                    request_deserializer=livekit__sip__pb2.DeleteSIPTrunkRequest.FromString,
                    response_serializer=livekit__sip__pb2.SIPTrunkInfo.SerializeToString,
            ),
            'CreateSIPDispatchRule': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateSIPDispatchRule,
                    request_deserializer=livekit__sip__pb2.CreateSIPDispatchRuleRequest.FromString,
                    response_serializer=livekit__sip__pb2.SIPDispatchRuleInfo.SerializeToString,
            ),
            'ListSIPDispatchRule': grpc.unary_unary_rpc_method_handler(
                    servicer.ListSIPDispatchRule,
                    request_deserializer=livekit__sip__pb2.ListSIPDispatchRuleRequest.FromString,
                    response_serializer=livekit__sip__pb2.ListSIPDispatchRuleResponse.SerializeToString,
            ),
            'DeleteSIPDispatchRule': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteSIPDispatchRule,
                    request_deserializer=livekit__sip__pb2.DeleteSIPDispatchRuleRequest.FromString,
                    response_serializer=livekit__sip__pb2.SIPDispatchRuleInfo.SerializeToString,
            ),
            'CreateSIPParticipant': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateSIPParticipant,
                    request_deserializer=livekit__sip__pb2.CreateSIPParticipantRequest.FromString,
                    response_serializer=livekit__sip__pb2.SIPParticipantInfo.SerializeToString,
            ),
            'TransferSIPParticipant': grpc.unary_unary_rpc_method_handler(
                    servicer.TransferSIPParticipant,
                    request_deserializer=livekit__sip__pb2.TransferSIPParticipantRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'livekit.SIP', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('livekit.SIP', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class SIP(object):
    """
    LiveKit's SIP API is built with 3 high level primitives
    - SIP Trunk
    - SIP Dispatch Rule
    - SIP Participant


    The `SIP Trunk` is used to accept and make calls. A `SIP Trunk` is configured with
    the IPs/Ports and Authentication details of your SIP Provider. When a call is accepted from
    the `SIP Trunk` it is then handled by the `SIP Dispatch Rules`. When a `SIP Participant` is created
    for a outbound call a `SIP Trunk` is chosen to make the call with.


    The `SIP Dispatch Rule` is a list of rules that dictate how a incoming SIP call should be handled.
    LiveKit currently supports 2 types, but may support more in the future.

    - `Direct Dispatch` puts a caller into a existing room, possibly choosing between multiple rooms with a pin
    - `Individual Dispatch` puts a caller into a new room created for the call


    The `SIP Participant` represents an active SIP Session. These SIP Sessions are always associated with
    a Participant on LiveKit side. Inbound calls create Participants directly (with a `SIP` kind), while outbound
    calls must be initiated with `CreateSIPParticipant`.

    """

    @staticmethod
    def ListSIPTrunk(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/livekit.SIP/ListSIPTrunk',
            livekit__sip__pb2.ListSIPTrunkRequest.SerializeToString,
            livekit__sip__pb2.ListSIPTrunkResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateSIPInboundTrunk(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/livekit.SIP/CreateSIPInboundTrunk',
            livekit__sip__pb2.CreateSIPInboundTrunkRequest.SerializeToString,
            livekit__sip__pb2.SIPInboundTrunkInfo.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateSIPOutboundTrunk(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/livekit.SIP/CreateSIPOutboundTrunk',
            livekit__sip__pb2.CreateSIPOutboundTrunkRequest.SerializeToString,
            livekit__sip__pb2.SIPOutboundTrunkInfo.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetSIPInboundTrunk(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/livekit.SIP/GetSIPInboundTrunk',
            livekit__sip__pb2.GetSIPInboundTrunkRequest.SerializeToString,
            livekit__sip__pb2.GetSIPInboundTrunkResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetSIPOutboundTrunk(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/livekit.SIP/GetSIPOutboundTrunk',
            livekit__sip__pb2.GetSIPOutboundTrunkRequest.SerializeToString,
            livekit__sip__pb2.GetSIPOutboundTrunkResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListSIPInboundTrunk(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/livekit.SIP/ListSIPInboundTrunk',
            livekit__sip__pb2.ListSIPInboundTrunkRequest.SerializeToString,
            livekit__sip__pb2.ListSIPInboundTrunkResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListSIPOutboundTrunk(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/livekit.SIP/ListSIPOutboundTrunk',
            livekit__sip__pb2.ListSIPOutboundTrunkRequest.SerializeToString,
            livekit__sip__pb2.ListSIPOutboundTrunkResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteSIPTrunk(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/livekit.SIP/DeleteSIPTrunk',
            livekit__sip__pb2.DeleteSIPTrunkRequest.SerializeToString,
            livekit__sip__pb2.SIPTrunkInfo.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateSIPDispatchRule(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/livekit.SIP/CreateSIPDispatchRule',
            livekit__sip__pb2.CreateSIPDispatchRuleRequest.SerializeToString,
            livekit__sip__pb2.SIPDispatchRuleInfo.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListSIPDispatchRule(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/livekit.SIP/ListSIPDispatchRule',
            livekit__sip__pb2.ListSIPDispatchRuleRequest.SerializeToString,
            livekit__sip__pb2.ListSIPDispatchRuleResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteSIPDispatchRule(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/livekit.SIP/DeleteSIPDispatchRule',
            livekit__sip__pb2.DeleteSIPDispatchRuleRequest.SerializeToString,
            livekit__sip__pb2.SIPDispatchRuleInfo.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateSIPParticipant(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/livekit.SIP/CreateSIPParticipant',
            livekit__sip__pb2.CreateSIPParticipantRequest.SerializeToString,
            livekit__sip__pb2.SIPParticipantInfo.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def TransferSIPParticipant(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/livekit.SIP/TransferSIPParticipant',
            livekit__sip__pb2.TransferSIPParticipantRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
