# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from . import livekit_egress_pb2 as livekit__egress__pb2

GRPC_GENERATED_VERSION = '1.67.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in livekit_egress_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class EgressStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.StartRoomCompositeEgress = channel.unary_unary(
                '/livekit.Egress/StartRoomCompositeEgress',
                request_serializer=livekit__egress__pb2.RoomCompositeEgressRequest.SerializeToString,
                response_deserializer=livekit__egress__pb2.EgressInfo.FromString,
                _registered_method=True)
        self.StartWebEgress = channel.unary_unary(
                '/livekit.Egress/StartWebEgress',
                request_serializer=livekit__egress__pb2.WebEgressRequest.SerializeToString,
                response_deserializer=livekit__egress__pb2.EgressInfo.FromString,
                _registered_method=True)
        self.StartParticipantEgress = channel.unary_unary(
                '/livekit.Egress/StartParticipantEgress',
                request_serializer=livekit__egress__pb2.ParticipantEgressRequest.SerializeToString,
                response_deserializer=livekit__egress__pb2.EgressInfo.FromString,
                _registered_method=True)
        self.StartTrackCompositeEgress = channel.unary_unary(
                '/livekit.Egress/StartTrackCompositeEgress',
                request_serializer=livekit__egress__pb2.TrackCompositeEgressRequest.SerializeToString,
                response_deserializer=livekit__egress__pb2.EgressInfo.FromString,
                _registered_method=True)
        self.StartTrackEgress = channel.unary_unary(
                '/livekit.Egress/StartTrackEgress',
                request_serializer=livekit__egress__pb2.TrackEgressRequest.SerializeToString,
                response_deserializer=livekit__egress__pb2.EgressInfo.FromString,
                _registered_method=True)
        self.UpdateLayout = channel.unary_unary(
                '/livekit.Egress/UpdateLayout',
                request_serializer=livekit__egress__pb2.UpdateLayoutRequest.SerializeToString,
                response_deserializer=livekit__egress__pb2.EgressInfo.FromString,
                _registered_method=True)
        self.UpdateStream = channel.unary_unary(
                '/livekit.Egress/UpdateStream',
                request_serializer=livekit__egress__pb2.UpdateStreamRequest.SerializeToString,
                response_deserializer=livekit__egress__pb2.EgressInfo.FromString,
                _registered_method=True)
        self.ListEgress = channel.unary_unary(
                '/livekit.Egress/ListEgress',
                request_serializer=livekit__egress__pb2.ListEgressRequest.SerializeToString,
                response_deserializer=livekit__egress__pb2.ListEgressResponse.FromString,
                _registered_method=True)
        self.StopEgress = channel.unary_unary(
                '/livekit.Egress/StopEgress',
                request_serializer=livekit__egress__pb2.StopEgressRequest.SerializeToString,
                response_deserializer=livekit__egress__pb2.EgressInfo.FromString,
                _registered_method=True)


class EgressServicer(object):
    """Missing associated documentation comment in .proto file."""

    def StartRoomCompositeEgress(self, request, context):
        """start recording or streaming a room, participant, or tracks
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StartWebEgress(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StartParticipantEgress(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StartTrackCompositeEgress(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StartTrackEgress(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateLayout(self, request, context):
        """update web composite layout
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateStream(self, request, context):
        """add or remove stream endpoints
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListEgress(self, request, context):
        """list available egress
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StopEgress(self, request, context):
        """stop a recording or stream
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_EgressServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'StartRoomCompositeEgress': grpc.unary_unary_rpc_method_handler(
                    servicer.StartRoomCompositeEgress,
                    request_deserializer=livekit__egress__pb2.RoomCompositeEgressRequest.FromString,
                    response_serializer=livekit__egress__pb2.EgressInfo.SerializeToString,
            ),
            'StartWebEgress': grpc.unary_unary_rpc_method_handler(
                    servicer.StartWebEgress,
                    request_deserializer=livekit__egress__pb2.WebEgressRequest.FromString,
                    response_serializer=livekit__egress__pb2.EgressInfo.SerializeToString,
            ),
            'StartParticipantEgress': grpc.unary_unary_rpc_method_handler(
                    servicer.StartParticipantEgress,
                    request_deserializer=livekit__egress__pb2.ParticipantEgressRequest.FromString,
                    response_serializer=livekit__egress__pb2.EgressInfo.SerializeToString,
            ),
            'StartTrackCompositeEgress': grpc.unary_unary_rpc_method_handler(
                    servicer.StartTrackCompositeEgress,
                    request_deserializer=livekit__egress__pb2.TrackCompositeEgressRequest.FromString,
                    response_serializer=livekit__egress__pb2.EgressInfo.SerializeToString,
            ),
            'StartTrackEgress': grpc.unary_unary_rpc_method_handler(
                    servicer.StartTrackEgress,
                    request_deserializer=livekit__egress__pb2.TrackEgressRequest.FromString,
                    response_serializer=livekit__egress__pb2.EgressInfo.SerializeToString,
            ),
            'UpdateLayout': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateLayout,
                    request_deserializer=livekit__egress__pb2.UpdateLayoutRequest.FromString,
                    response_serializer=livekit__egress__pb2.EgressInfo.SerializeToString,
            ),
            'UpdateStream': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateStream,
                    request_deserializer=livekit__egress__pb2.UpdateStreamRequest.FromString,
                    response_serializer=livekit__egress__pb2.EgressInfo.SerializeToString,
            ),
            'ListEgress': grpc.unary_unary_rpc_method_handler(
                    servicer.ListEgress,
                    request_deserializer=livekit__egress__pb2.ListEgressRequest.FromString,
                    response_serializer=livekit__egress__pb2.ListEgressResponse.SerializeToString,
            ),
            'StopEgress': grpc.unary_unary_rpc_method_handler(
                    servicer.StopEgress,
                    request_deserializer=livekit__egress__pb2.StopEgressRequest.FromString,
                    response_serializer=livekit__egress__pb2.EgressInfo.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'livekit.Egress', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('livekit.Egress', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class Egress(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def StartRoomCompositeEgress(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/livekit.Egress/StartRoomCompositeEgress',
            livekit__egress__pb2.RoomCompositeEgressRequest.SerializeToString,
            livekit__egress__pb2.EgressInfo.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StartWebEgress(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/livekit.Egress/StartWebEgress',
            livekit__egress__pb2.WebEgressRequest.SerializeToString,
            livekit__egress__pb2.EgressInfo.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StartParticipantEgress(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/livekit.Egress/StartParticipantEgress',
            livekit__egress__pb2.ParticipantEgressRequest.SerializeToString,
            livekit__egress__pb2.EgressInfo.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StartTrackCompositeEgress(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/livekit.Egress/StartTrackCompositeEgress',
            livekit__egress__pb2.TrackCompositeEgressRequest.SerializeToString,
            livekit__egress__pb2.EgressInfo.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StartTrackEgress(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/livekit.Egress/StartTrackEgress',
            livekit__egress__pb2.TrackEgressRequest.SerializeToString,
            livekit__egress__pb2.EgressInfo.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateLayout(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/livekit.Egress/UpdateLayout',
            livekit__egress__pb2.UpdateLayoutRequest.SerializeToString,
            livekit__egress__pb2.EgressInfo.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateStream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/livekit.Egress/UpdateStream',
            livekit__egress__pb2.UpdateStreamRequest.SerializeToString,
            livekit__egress__pb2.EgressInfo.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListEgress(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/livekit.Egress/ListEgress',
            livekit__egress__pb2.ListEgressRequest.SerializeToString,
            livekit__egress__pb2.ListEgressResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StopEgress(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/livekit.Egress/StopEgress',
            livekit__egress__pb2.StopEgressRequest.SerializeToString,
            livekit__egress__pb2.EgressInfo.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
